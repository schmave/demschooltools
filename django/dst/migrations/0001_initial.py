# Generated by Django 5.1.6 on 2025-10-02 00:38

from decimal import Decimal

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Case",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("case_number", models.CharField(default="", max_length=255)),
                ("findings", models.TextField(default="")),
                ("date", models.DateField(blank=True, null=True)),
                ("location", models.CharField(default="", max_length=255)),
                ("time", models.CharField(default="", max_length=255)),
                ("date_closed", models.DateField(blank=True, null=True)),
            ],
            options={
                "db_table": "case",
            },
        ),
        migrations.CreateModel(
            name="Entry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.TextField()),
                ("num", models.TextField()),
                ("deleted", models.BooleanField(default=False)),
                ("content", models.TextField()),
                ("is_breaking_res_plan", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "entry",
            },
        ),
        migrations.CreateModel(
            name="Meeting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
            ],
            options={
                "db_table": "meeting",
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("short_name", models.TextField(blank=True, default="")),
                ("timezone", models.TextField(default="America/New_York")),
                ("late_time", models.TimeField(blank=True, null=True)),
                ("printer_email", models.TextField(blank=True, default="")),
                ("mailchimp_api_key", models.TextField(blank=True, default="")),
                (
                    "mailchimp_last_sync_person_changes",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("mailchimp_updates_email", models.TextField(blank=True, default="")),
                ("jc_reset_day", models.IntegerField(default=3)),
                ("show_last_modified_in_print", models.BooleanField(default=True)),
                ("show_history_in_print", models.BooleanField(default=True)),
                ("show_custodia", models.BooleanField(default=False)),
                ("show_attendance", models.BooleanField(default=True)),
                ("show_electronic_signin", models.BooleanField(default=False)),
                ("show_accounting", models.BooleanField(default=False)),
                ("show_roles", models.BooleanField(default=False)),
                ("enable_case_references", models.BooleanField(default=False)),
                ("attendance_enable_off_campus", models.BooleanField(default=False)),
                ("attendance_show_reports", models.BooleanField(default=False)),
                (
                    "attendance_report_latest_departure_time",
                    models.TimeField(blank=True, null=True),
                ),
                (
                    "attendance_report_latest_departure_time_2",
                    models.TimeField(blank=True, null=True),
                ),
                (
                    "attendance_day_earliest_departure_time",
                    models.TimeField(blank=True, null=True),
                ),
                (
                    "attendance_report_late_fee",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "attendance_report_late_fee_2",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "attendance_report_late_fee_interval",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "attendance_report_late_fee_interval_2",
                    models.IntegerField(blank=True, null=True),
                ),
                ("attendance_show_percent", models.BooleanField(default=False)),
                (
                    "attendance_show_weighted_percent",
                    models.BooleanField(default=False),
                ),
                ("attendance_show_rate_in_checkin", models.BooleanField(default=False)),
                ("attendance_enable_partial_days", models.BooleanField(default=False)),
                (
                    "attendance_day_latest_start_time",
                    models.TimeField(blank=True, null=True),
                ),
                ("attendance_day_min_hours", models.FloatField(blank=True, null=True)),
                (
                    "attendance_partial_day_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "attendance_admin_pin",
                    models.CharField(blank=True, default="", max_length=10),
                ),
                (
                    "attendance_default_absence_code",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "attendance_default_absence_code_time",
                    models.TimeField(blank=True, null=True),
                ),
                (
                    "roles_individual_term",
                    models.TextField(blank=True, default="Clerk", null=True),
                ),
                (
                    "roles_committee_term",
                    models.TextField(blank=True, default="Committee", null=True),
                ),
                (
                    "roles_group_term",
                    models.TextField(blank=True, default="Group", null=True),
                ),
                ("custodia_password", models.TextField(blank=True, default="")),
            ],
            options={
                "db_table": "organization",
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("sort_order", models.IntegerField(blank=True, null=True)),
                ("enabled", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "task",
            },
        ),
        migrations.CreateModel(
            name="CaseMeeting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dst.case"
                    ),
                ),
                (
                    "meeting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dst.meeting"
                    ),
                ),
            ],
            options={
                "db_table": "case_meeting",
            },
        ),
        migrations.AddField(
            model_name="case",
            name="meeting",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="dst.meeting"
            ),
        ),
        migrations.AddField(
            model_name="case",
            name="meetings",
            field=models.ManyToManyField(
                related_name="cases_many", through="dst.CaseMeeting", to="dst.meeting"
            ),
        ),
        migrations.AddField(
            model_name="meeting",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="dst.organization"
            ),
        ),
        migrations.CreateModel(
            name="Email",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField(blank=True, null=True)),
                ("sent", models.BooleanField()),
                ("deleted", models.BooleanField()),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
            ],
            options={
                "db_table": "email",
            },
        ),
        migrations.CreateModel(
            name="Chapter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.TextField()),
                ("num", models.TextField()),
                ("deleted", models.BooleanField(default=False)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
            ],
            options={
                "db_table": "chapter",
            },
        ),
        migrations.CreateModel(
            name="AttendanceCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=64)),
                ("description", models.TextField()),
                ("color", models.CharField(max_length=16)),
                ("counts_toward_attendance", models.BooleanField(default=False)),
                ("not_counted", models.BooleanField(default=False)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
            ],
            options={
                "db_table": "attendance_code",
            },
        ),
        migrations.CreateModel(
            name="AllowedIp",
            fields=[
                ("ip", models.TextField(primary_key=True, serialize=False)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
            ],
            options={
                "db_table": "allowed_ips",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("password", models.TextField(db_column="hashed_password")),
                ("is_active", models.BooleanField(db_column="active", default=True)),
                ("name", models.TextField()),
                ("email", models.TextField()),
                ("email_validated", models.BooleanField(default=False)),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
            ],
            options={
                "db_table": 'public"."users',
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationHost",
            fields=[
                ("host", models.TextField(primary_key=True, serialize=False)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="hosts",
                        to="dst.organization",
                    ),
                ),
            ],
            options={
                "db_table": "organization_hosts",
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                ("first_name", models.CharField(default="", max_length=255)),
                ("last_name", models.CharField(default="", max_length=255)),
                ("display_name", models.CharField(default="", max_length=255)),
                ("is_family", models.BooleanField(default=False)),
                ("email", models.CharField(blank=True, default="", max_length=255)),
                ("address", models.CharField(blank=True, default="", max_length=255)),
                ("city", models.CharField(blank=True, default="", max_length=255)),
                ("state", models.CharField(blank=True, default="", max_length=255)),
                ("zip", models.CharField(blank=True, default="", max_length=255)),
                (
                    "neighborhood",
                    models.CharField(blank=True, default="", max_length=255),
                ),
                ("gender", models.TextField(default="Unknown")),
                ("dob", models.DateField(blank=True, null=True)),
                ("approximate_dob", models.DateField(blank=True, null=True)),
                ("grade", models.TextField(blank=True, default="")),
                ("notes", models.TextField(blank=True, default="")),
                ("previous_school", models.CharField(default="", max_length=255)),
                ("school_district", models.CharField(default="", max_length=255)),
                (
                    "id",
                    models.IntegerField(
                        db_column="person_id", primary_key=True, serialize=False
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("pin", models.CharField(blank=True, default="", max_length=10)),
                ("custodia_show_as_absent", models.DateField(blank=True, null=True)),
                ("custodia_start_date", models.DateField(blank=True, null=True)),
                (
                    "family_person",
                    models.ForeignKey(
                        blank=True,
                        db_column="family_person_id",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.person",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
            ],
            options={
                "db_table": "person",
            },
        ),
        migrations.CreateModel(
            name="Donation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("dollar_value", models.FloatField(blank=True, null=True)),
                ("is_cash", models.BooleanField()),
                ("description", models.TextField()),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("thanked", models.BooleanField()),
                ("thanked_time", models.DateTimeField(blank=True, null=True)),
                ("indiegogo_reward_given", models.BooleanField()),
                (
                    "indiegogo_reward_given_time",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "indiegogo_reward_by_user",
                    models.ForeignKey(
                        blank=True,
                        db_column="indiegogo_reward_by_user_id",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="donations_indiegogo_rewarded",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "thanked_by_user",
                    models.ForeignKey(
                        blank=True,
                        db_column="thanked_by_user_id",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="donations_thanked",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dst.person"
                    ),
                ),
            ],
            options={
                "db_table": "donation",
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField(blank=True, null=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dst.person"
                    ),
                ),
            ],
            options={
                "db_table": "comments",
            },
        ),
        migrations.CreateModel(
            name="Charge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("plea", models.CharField(default="", max_length=255)),
                ("resolution_plan", models.TextField(default="")),
                ("referred_to_sm", models.BooleanField(default=False)),
                ("sm_decision", models.TextField(blank=True, null=True)),
                ("sm_decision_date", models.DateField(blank=True, null=True)),
                (
                    "minor_referral_destination",
                    models.CharField(default="", max_length=255),
                ),
                ("severity", models.CharField(default="", max_length=255)),
                ("rp_complete", models.BooleanField(default=False)),
                ("rp_complete_date", models.DateTimeField(blank=True, null=True)),
                (
                    "case",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.case"
                    ),
                ),
                (
                    "referenced_charge",
                    models.ForeignKey(
                        blank=True,
                        db_column="referenced_charge_id",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.charge",
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        blank=True,
                        db_column="rule_id",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.entry",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.person",
                    ),
                ),
            ],
            options={
                "db_table": "charge",
            },
        ),
        migrations.CreateModel(
            name="AttendanceWeek",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("monday", models.DateField()),
                ("extra_hours", models.FloatField(default=0)),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.person"
                    ),
                ),
            ],
            options={
                "db_table": "attendance_week",
            },
        ),
        migrations.CreateModel(
            name="AttendanceRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("category", models.TextField(blank=True, null=True)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("monday", models.BooleanField()),
                ("tuesday", models.BooleanField()),
                ("wednesday", models.BooleanField()),
                ("thursday", models.BooleanField()),
                ("friday", models.BooleanField()),
                (
                    "absence_code",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("min_hours", models.FloatField(blank=True, null=True)),
                ("latest_start_time", models.TimeField(blank=True, null=True)),
                ("earliest_departure_time", models.TimeField(blank=True, null=True)),
                ("exempt_from_fees", models.BooleanField()),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.person",
                    ),
                ),
            ],
            options={
                "db_table": "attendance_rule",
            },
        ),
        migrations.CreateModel(
            name="AttendanceDay",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("day", models.DateField()),
                ("code", models.CharField(blank=True, max_length=64, null=True)),
                ("start_time", models.TimeField(blank=True, null=True)),
                ("end_time", models.TimeField(blank=True, null=True)),
                ("off_campus_departure_time", models.TimeField(blank=True, null=True)),
                ("off_campus_return_time", models.TimeField(blank=True, null=True)),
                (
                    "off_campus_minutes_exempted",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.person"
                    ),
                ),
            ],
            options={
                "db_table": "attendance_day",
            },
        ),
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.IntegerField()),
                (
                    "initial_balance",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("name", models.TextField(default="")),
                (
                    "monthly_credit",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0"), max_digits=10
                    ),
                ),
                (
                    "date_last_monthly_credit",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.person",
                    ),
                ),
            ],
            options={
                "db_table": "account",
            },
        ),
        migrations.CreateModel(
            name="PersonAtCase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role", models.IntegerField(default=0)),
                (
                    "case",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.case",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.person"
                    ),
                ),
            ],
            options={
                "db_table": "person_at_case",
            },
        ),
        migrations.CreateModel(
            name="PersonAtMeeting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role", models.IntegerField(blank=True, null=True)),
                (
                    "meeting",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.meeting",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.person"
                    ),
                ),
            ],
            options={
                "db_table": "person_at_meeting",
            },
        ),
        migrations.CreateModel(
            name="PersonChange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("old_email", models.CharField(max_length=255)),
                ("new_email", models.CharField(max_length=255)),
                ("time", models.DateTimeField(auto_now_add=True)),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.person"
                    ),
                ),
            ],
            options={
                "db_table": "person_change",
            },
        ),
        migrations.CreateModel(
            name="PhoneNumber",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=255, null=True)),
                ("number", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dst.person"
                    ),
                ),
            ],
            options={
                "db_table": "phone_numbers",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("type", models.IntegerField()),
                ("eligibility", models.IntegerField()),
                ("name", models.TextField()),
                ("notes", models.TextField()),
                ("description", models.TextField()),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
            ],
            options={
                "db_table": "role",
            },
        ),
        migrations.CreateModel(
            name="RoleRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role_name", models.TextField()),
                ("date_created", models.DateTimeField()),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.role"
                    ),
                ),
            ],
            options={
                "db_table": "role_record",
            },
        ),
        migrations.CreateModel(
            name="RoleRecordMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("person_name", models.TextField(blank=True, null=True)),
                ("type", models.IntegerField()),
                (
                    "person",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.person",
                    ),
                ),
                (
                    "role_record",
                    models.ForeignKey(
                        db_column="record_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.rolerecord",
                    ),
                ),
            ],
            options={
                "db_table": "role_record_member",
            },
        ),
        migrations.CreateModel(
            name="Section",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.TextField()),
                ("num", models.TextField()),
                ("deleted", models.BooleanField(default=False)),
                (
                    "chapter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sections",
                        to="dst.chapter",
                    ),
                ),
            ],
            options={
                "db_table": "section",
            },
        ),
        migrations.CreateModel(
            name="ManualChange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_entered", models.DateTimeField(auto_now_add=True)),
                ("effective_date", models.DateField(blank=True, null=True)),
                ("show_date_in_history", models.BooleanField(default=True)),
                ("was_deleted", models.BooleanField(default=False)),
                ("was_created", models.BooleanField(default=False)),
                ("old_content", models.TextField(blank=True, null=True)),
                ("new_content", models.TextField(blank=True, null=True)),
                ("old_title", models.CharField(blank=True, max_length=255, null=True)),
                ("new_title", models.CharField(blank=True, max_length=255, null=True)),
                ("old_num", models.TextField(blank=True, null=True)),
                ("new_num", models.TextField(blank=True, null=True)),
                (
                    "chapter",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="changes",
                        to="dst.chapter",
                    ),
                ),
                (
                    "entry",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="changes",
                        to="dst.entry",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="changes",
                        to="dst.section",
                    ),
                ),
            ],
            options={
                "db_table": "manual_change",
            },
        ),
        migrations.AddField(
            model_name="entry",
            name="section",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="entries",
                to="dst.section",
            ),
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.TextField()),
                ("use_student_display", models.BooleanField(default=False)),
                ("show_in_jc", models.BooleanField(default=False)),
                ("show_in_attendance", models.BooleanField(default=False)),
                ("show_in_menu", models.BooleanField(default=True)),
                ("show_in_account_balances", models.BooleanField(default=False)),
                ("show_in_roles", models.BooleanField(default=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
            ],
            options={
                "db_table": "tag",
            },
        ),
        migrations.CreateModel(
            name="PersonTagChange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("time", models.DateTimeField(auto_now_add=True)),
                ("was_add", models.BooleanField()),
                (
                    "creator",
                    models.ForeignKey(
                        db_column="creator_id",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.person"
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.tag"
                    ),
                ),
            ],
            options={
                "db_table": "person_tag_change",
            },
        ),
        migrations.AddField(
            model_name="person",
            name="tags",
            field=models.ManyToManyField(
                blank=True, db_table="person_tag", to="dst.tag"
            ),
        ),
        migrations.CreateModel(
            name="NotificationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("the_type", models.IntegerField()),
                ("email", models.TextField()),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.tag",
                    ),
                ),
            ],
            options={
                "db_table": "notification_rule",
            },
        ),
        migrations.CreateModel(
            name="MailchimpSync",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("mailchimp_list_id", models.CharField(max_length=255)),
                ("sync_local_adds", models.BooleanField()),
                ("sync_local_removes", models.BooleanField()),
                ("last_sync", models.DateTimeField(blank=True, null=True)),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.tag"
                    ),
                ),
            ],
            options={
                "db_table": "mailchimp_sync",
            },
        ),
        migrations.CreateModel(
            name="CompletedTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dst.comment",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dst.person"
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="dst.task"
                    ),
                ),
            ],
            options={
                "db_table": "completed_task",
            },
        ),
        migrations.CreateModel(
            name="TaskList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.tag",
                    ),
                ),
            ],
            options={
                "db_table": "task_list",
            },
        ),
        migrations.AddField(
            model_name="task",
            name="task_list",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="dst.tasklist",
            ),
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("from_name", models.TextField()),
                ("to_name", models.TextField()),
                ("description", models.TextField()),
                ("type", models.IntegerField()),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("date_created", models.DateTimeField()),
                ("archived", models.BooleanField(default=False)),
                (
                    "created_by_user",
                    models.ForeignKey(
                        blank=True,
                        db_column="created_by_user_id",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "from_account",
                    models.ForeignKey(
                        blank=True,
                        db_column="from_account_id",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transactions_from",
                        to="dst.account",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.organization",
                    ),
                ),
                (
                    "to_account",
                    models.ForeignKey(
                        blank=True,
                        db_column="to_account_id",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transactions_to",
                        to="dst.account",
                    ),
                ),
            ],
            options={
                "db_table": "transactions",
            },
        ),
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role", models.TextField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": 'public"."user_role',
            },
        ),
        migrations.CreateModel(
            name="CaseReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "referenced_case",
                    models.ForeignKey(
                        db_column="referenced_case",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.case",
                    ),
                ),
                (
                    "referencing_case",
                    models.ForeignKey(
                        db_column="referencing_case",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="case_reference_cases",
                        to="dst.case",
                    ),
                ),
            ],
            options={
                "db_table": "case_reference",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("referenced_case", "referencing_case"),
                        name="uk_case_case",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="ChargeReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "referenced_charge",
                    models.ForeignKey(
                        db_column="referenced_charge",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.charge",
                    ),
                ),
                (
                    "referencing_case",
                    models.ForeignKey(
                        db_column="referencing_case",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dst.case",
                    ),
                ),
            ],
            options={
                "db_table": "charge_reference",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("referenced_charge", "referencing_case"),
                        name="uk_charge_case",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="LinkedAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("provider_user_id", models.TextField()),
                ("provider_key", models.TextField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="linked_accounts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": 'public"."linked_account',
                "constraints": [
                    models.UniqueConstraint(
                        fields=("provider_key", "provider_user_id"),
                        name="u_linked_account",
                    )
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="case",
            constraint=models.UniqueConstraint(
                fields=("case_number", "meeting"), name="u_case_number_meeting"
            ),
        ),
        migrations.AddConstraint(
            model_name="meeting",
            constraint=models.UniqueConstraint(
                fields=("organization", "date"), name="unq_org_date"
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                fields=("email",), name="users_unique_email_1"
            ),
        ),
        migrations.AddIndex(
            model_name="attendanceweek",
            index=models.Index(fields=["monday"], name="attendance_week_monday_idx"),
        ),
        migrations.AddConstraint(
            model_name="attendanceweek",
            constraint=models.UniqueConstraint(
                fields=("person", "monday"), name="u_attendance_week"
            ),
        ),
        migrations.AddIndex(
            model_name="attendanceday",
            index=models.Index(fields=["day"], name="attendance_day_day_idx"),
        ),
        migrations.AddConstraint(
            model_name="attendanceday",
            constraint=models.UniqueConstraint(
                fields=("person", "day"), name="u_attendance_day"
            ),
        ),
        migrations.AddConstraint(
            model_name="tag",
            constraint=models.UniqueConstraint(
                fields=("title", "organization"), name="unique_title_org"
            ),
        ),
        migrations.AddConstraint(
            model_name="completedtask",
            constraint=models.UniqueConstraint(
                fields=("task", "person"), name="unique_completed_task_1"
            ),
        ),
    ]
