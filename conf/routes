# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET /login	controllers.Public.index(request: Request)

GET     /                         controllers.Application.index(request: Request)

GET     /editToday                controllers.ApplicationEditing.editTodaysMinutes(request: Request)
GET     /viewToday                controllers.Application.viewTodaysMinutes(request: Request)


GET  /viewMeeting/:id	controllers.Application.viewMeeting(id: Integer, request: Request)
GET  /printMeeting/:id	controllers.Application.printMeeting(id: Integer, request: Request)
GET  /printWeeklyMinutes/:start_date	controllers.Application.printWeeklyMinutes(start_date : String, request: Request)
GET  /editMeeting/:id	controllers.ApplicationEditing.editMeeting(id: Integer, request: Request)

GET /downloadCharges    controllers.Application.downloadCharges(request: Request)

GET  /viewMeetingResolutionPlans/:id	controllers.Application.viewMeetingResolutionPlans(id: Integer, request: Request)
GET  /downloadMeetingResolutionPlans/:id	controllers.Application.downloadMeetingResolutionPlans(id: Integer, request: Request)
GET  /editResolutionPlanList	controllers.Application.editResolutionPlanList(request: Request)
GET  /viewSimpleResolutionPlans		controllers.Application.viewSimpleResolutionPlans(request: Request)

POST	/setResolutionPlanComplete	controllers.ApplicationEditing.setResolutionPlanComplete(id : Integer, complete : Boolean, request: Request)

GET   /personRuleHistory/:personId/:ruleId   controllers.Application.getPersonRuleHistory(personId: Integer, ruleId: Integer, request: Request)
GET   /personHistory/:id    controllers.Application.getPersonHistory(id: Integer, request: Request)
GET   /ruleHistory/:id    controllers.Application.getRuleHistory(id: Integer, request: Request)

GET   /viewPersonsWriteups/:id    controllers.Application.viewPersonsWriteups(id: Integer, request: Request)
GET   /viewPersonHistory/:id    controllers.Application.viewPersonHistory(id: Integer, redact_names: Boolean ?= false, start_date : String ?= "", end_date : String ?= "", request: Request)
GET   /viewRuleHistory/:id    controllers.Application.viewRuleHistory(id: Integer, start_date : String ?= "", end_date : String ?= "", request: Request)


GET   /viewSchoolMeetingReferrals    controllers.Application.viewSchoolMeetingReferrals(request: Request)
GET   /enterSchoolMeeting  controllers.ApplicationEditing.enterSchoolMeetingDecisions(request: Request)
GET   /editSchoolMeeting/:charge_id  controllers.ApplicationEditing.editSchoolMeetingDecision(charge_id: Integer, request: Request)
POST  /enterSchoolMeeting  controllers.ApplicationEditing.saveSchoolMeetingDecisions(request: Request)

GET /viewSchoolMeeting controllers.Application.viewSchoolMeetingDecisions(request: Request)

POST /newCase	controllers.ApplicationEditing.createCase(meeting_id : Integer, request: Request)
POST /saveCase   controllers.ApplicationEditing.saveCase(id : Integer, request: Request)
POST /continueCase	controllers.ApplicationEditing.continueCase(meeting_id : Integer, case_id : Integer, request: Request)

POST /addPersonAtMeeting    controllers.ApplicationEditing.addPersonAtMeeting(meeting_id : Integer, personId : Integer, role : Integer)
POST /removePersonAtMeeting    controllers.ApplicationEditing.removePersonAtMeeting(meeting_id : Integer, personId : Integer, role : Integer)


POST /addPersonAtCase controllers.ApplicationEditing.addPersonAtCase(case_id : Integer, personId : Integer, role : Integer, request: Request)
POST /removePersonAtCase controllers.ApplicationEditing.removePersonAtCase(case_id : Integer, personId : Integer, role : Integer)

GET /getCaseReferencesJson controllers.ApplicationEditing.getCaseReferencesJson(case_id : Integer, request: Request)
POST /addReferencedCase controllers.ApplicationEditing.addReferencedCase(case_id : Integer, referenced_case_id : Integer, request: Request)
POST /removeReferencedCase controllers.ApplicationEditing.removeReferencedCase(case_id : Integer, referenced_case_id : Integer, request: Request)
POST /clearAllReferencedCases controllers.ApplicationEditing.clearAllReferencedCases(case_id : Integer, request: Request)
POST /addChargeReferenceToCase controllers.ApplicationEditing.addChargeReferenceToCase(case_id : Integer, charge_id : Integer, request: Request)
POST /removeChargeReferenceFromCase controllers.ApplicationEditing.removeChargeReferenceFromCase(case_id : Integer, charge_id : Integer, request: Request)

POST /addCharge   controllers.ApplicationEditing.addCharge(case_id : Integer)
POST /saveCharge controllers.ApplicationEditing.saveCharge(id : Integer, request: Request)
POST /removeCharge   controllers.ApplicationEditing.removeCharge(id : Integer, request: Request)

POST /generateChargeFromReference   controllers.ApplicationEditing.generateChargeFromReference(case_id : Integer, referenced_charge_id: Integer, request: Request)

GET /getLastRp/:personId/:ruleId	controllers.Application.getLastRp(personId : Integer, ruleId : Integer, request: Request)


GET /viewManual       controllers.Application.viewManual(request: Request)
GET /viewManualChanges       controllers.Application.viewManualChanges(begin_date : String ?= "", request: Request)
GET /viewChapter/:id       controllers.Application.viewChapter(id : Integer, request: Request)
GET /searchManual       controllers.Application.searchManual(searchString : String ?= "", request: Request)

GET /printManual	controllers.Application.printManual(request: Request)
GET /printManualChapter/:id	controllers.Application.printManualChapter(id : Integer, request: Request)


GET /thisWeekReport	controllers.Application.thisWeekReport(request: Request)
GET /viewWeeklyReport/:date	controllers.Application.viewWeeklyReport(date : String, request: Request)


GET /addChapter			controllers.ApplicationEditing.addChapter(request: Request)
GET /editChapter/:id		controllers.ApplicationEditing.editChapter(id : Integer, request: Request)
POST /saveChapter	controllers.ApplicationEditing.saveChapter(request: Request)
GET /addSection/:chapterId		controllers.ApplicationEditing.addSection(chapterId : Integer, request: Request)
GET /editSection/:id		controllers.ApplicationEditing.editSection(id : Integer, request: Request)
POST /saveSection	controllers.ApplicationEditing.saveSection(request: Request)
GET /addEntry/:sectionId		controllers.ApplicationEditing.addEntry(sectionId : Integer, request: Request)
GET /editEntry/:id		controllers.ApplicationEditing.editEntry(id : Integer, request: Request)
POST /saveEntry		controllers.ApplicationEditing.saveEntry(request: Request)
POST /renderMarkdown	controllers.Application.renderMarkdown(request: Request)

GET      /custodia-admin            controllers.Attendance.viewCustodiaAdmin(request: Request)
GET      /custodia                  controllers.Proxy.proxy0(request: Request)
GET      /custodia*extra            controllers.Proxy.proxy(request: Request, extra: String)
POST     /custodia*extra            controllers.Proxy.proxy(request: Request, extra: String)

GET      /silk*extra                controllers.Proxy.proxy(request: Request, extra: String)
POST     /silk*extra                controllers.Proxy.proxy(request: Request, extra: String)
GET      /admin                     controllers.Proxy.proxy0(request: Request)
GET      /admin*extra               controllers.Proxy.proxy(request: Request, extra: String)
POST     /admin*extra               controllers.Proxy.proxy(request: Request, extra: String)
GET      /django-static/*extra      controllers.Proxy.proxy(request: Request, extra: String)

GET      /custodia-api/*extra       controllers.Proxy.proxy(request: Request, extra: String)
POST     /custodia-api/*extra       controllers.Proxy.proxy(request: Request, extra: String)
PUT      /custodia-api/*extra       controllers.Proxy.proxy(request: Request, extra: String)
DELETE   /custodia-api/*extra       controllers.Proxy.proxy(request: Request, extra: String)

GET     /jsonPeople               controllers.CRM.jsonPeople(term ?= "", request: Request)
GET     /people                   controllers.CRM.recentComments(request: Request)
GET     /allPeople                controllers.CRM.allPeople(request: Request)
GET     /people/new               controllers.CRM.newPerson(request: Request)
GET     /people/:id               controllers.CRM.person(id: Integer, request: Request)
POST    /people                   controllers.CRM.makeNewPerson(request: Request)
POST    /people/:id/delete        controllers.CRM.deletePerson(id: Integer)

GET     /attendance		  controllers.Attendance.index(start_date ?= "", end_date: String ?= "", is_custom_date: Boolean ?= false, request: Request)
GET     /attendance/jsonPeople               controllers.Attendance.jsonPeople(term ?= "", request: Request)
GET     /attendance/viewWeek	  controllers.Attendance.viewWeek(date : String ?= "", request: Request)
GET     /attendance/editWeek      controllers.Attendance.editWeek(date : String ?= "", request: Request)

GET  	/attendance/checkin				controllers.Public.checkin()
GET     /attendance/checkin/data 		controllers.Checkin.checkinData(time: String, request: Request)
POST    /attendance/checkin/message 	controllers.Checkin.checkinMessage(time_string: String, personId: Integer, is_arriving: Boolean, request: Request)
POST    /attendance/checkin/adminmessage 	controllers.Checkin.adminMessage(personId: Integer, in_time: String, out_time: String, absence_code: String, time_string: String ?= "", request: Request)
GET     /attendance/rules         controllers.Attendance.rules(request: Request)
GET     /attendance/newRule         controllers.Attendance.newRule(request: Request)
GET     /attendance/rule         controllers.Attendance.rule(id: Integer, request: Request)
POST    /attendance/saveRule         controllers.Attendance.saveRule(request: Request)
POST    /attendance/deleteRule         controllers.Attendance.deleteRule(id: Integer, request: Request)
GET     /attendance/pins         controllers.Attendance.assignPINs(request: Request)
GET     /attendance/savepins       controllers.Attendance.savePINs(request: Request)
GET     /attendance/offCampusTime         controllers.Attendance.offCampusTime(request: Request)
POST    /attendance/deleteOffCampusTime         controllers.Attendance.deleteOffCampusTime(request: Request)
GET     /attendance/addOffCampusTime         controllers.Attendance.addOffCampusTime(request: Request)
POST     /attendance/saveOffCampusTime       controllers.Attendance.saveOffCampusTime(request: Request)
GET 	/attendance/reports				  			controllers.Attendance.reports(request: Request)
POST 	/attendance/reports				  			controllers.Attendance.runReport(request: Request)
POST	/attendance/newCode        controllers.Attendance.newCode(request: Request)
GET	/attendance/editCode/:id   controllers.Attendance.editCode(id : Integer, request: Request)
POST	/attendance/saveCode      controllers.Attendance.saveCode(request: Request)
GET     /attendance/codes         controllers.Attendance.viewCodes(request: Request)
GET     /attendance/download      controllers.Attendance.download(start_of_year ?= "", request: Request)
GET     /attendance/forPerson/:id controllers.Attendance.viewPersonReport(id : Integer, start_date : String ?= "", end_date : String ?= "", request: Request)

POST    /attendance/createPersonWeek  controllers.Attendance.createPersonWeek(request: Request)
POST    /attendance/deletePersonWeek  controllers.Attendance.deletePersonWeek(personId : Integer, monday : String, request: Request)
POST    /attendance/saveWeek          controllers.Attendance.saveWeek(week_id : Integer, extraHours : Double, request: Request)
POST    /attendance/saveDay           controllers.Attendance.saveDay(day_id : Integer, code ?= "", startTime ?= "", endTime ?= "", request: Request)

GET 	/accounting/transaction/:id		  			controllers.Accounting.transaction(id: Integer, request: Request)
GET 	/accounting/createTransaction				controllers.Accounting.newTransaction(request: Request)
POST 	/accounting/createTransaction				controllers.Accounting.makeNewTransaction(request: Request)
POST 	/accounting/saveTransaction					controllers.Accounting.saveTransaction(request: Request)
POST 	/accounting/deleteTransaction	  			controllers.Accounting.deleteTransaction(id: Integer)
GET 	/accounting/balances			  			controllers.Accounting.balances(request: Request)
GET 	/accounting/bankCashBalance		  			controllers.Accounting.bankCashBalance(request: Request)
GET 	/accounting/transactions		  			controllers.Accounting.transactionsReport(request: Request)
POST 	/accounting/transactions		  			controllers.Accounting.runTransactionsReport(request: Request)
POST 	/accounting/toggleTransactionArchived/:id	controllers.Accounting.toggleTransactionArchived(id: Integer, request: Request)
GET 	/accounting/accounts			  			controllers.Accounting.accounts(request: Request)
GET 	/accounting/account/:id		  				controllers.Accounting.account(id: Integer, request: Request)
GET 	/accounting/newAccount			  			controllers.Accounting.newAccount(request: Request)
POST 	/accounting/newAccount			  			controllers.Accounting.makeNewAccount(request: Request)
GET 	/accounting/editAccount/:id		  			controllers.Accounting.editAccount(id: Integer, request: Request)
POST 	/accounting/editAccount			  			controllers.Accounting.saveAccount(request: Request)
POST 	/accounting/deleteAccount		  			controllers.Accounting.deleteAccount(id: Integer)
GET 	/accounting/report				  			controllers.Accounting.report(request: Request)
POST 	/accounting/report				  			controllers.Accounting.runReport(request: Request)

GET 	/roles/index            controllers.Roles.index(request: Request)
GET 	/roles/records          controllers.Roles.records(request: Request)
GET 	/roles/newRole          controllers.Roles.newRole(request: Request)
POST 	/roles/newRole          controllers.Roles.makeNewRole(request: Request)
POST    /roles/updateRole/:id   controllers.Roles.updateRole(id: Integer, roleJson: String, request: Request)
POST    /roles/deleteRole/:id   controllers.Roles.deleteRole(id: Integer, request: Request)

GET     /people/edit/:id          controllers.CRM.editPerson(id: Integer, request: Request)
POST    /people/edit              controllers.CRM.savePersonEdits(request: Request)

GET     /jsonTags/:personId       controllers.CRM.jsonTags(term ?= "", personId: Integer, request: Request)
POST    /addTag/:personId         controllers.CRM.addTag(tagId : Integer ?= null, title ?= "", personId : Integer, request: Request)
POST    /removeTag/:personId/:tagId controllers.CRM.removeTag(personId: Integer, tagId: Integer, request: Request)
GET     /getTagMembers			  controllers.CRM.renderTagMembers(tagId : Integer, familyMode : String, request: Request)
GET     /viewAllTags              controllers.CRM.viewAllTags(request: Request)

POST    /addComment               controllers.CRM.addComment(request: Request)

GET     /viewTag/:id              controllers.CRM.viewTag(id: Integer, request: Request)
GET     /editTag/:id            controllers.CRM.editTag(id: Integer, request: Request)
POST    /saveTag                controllers.CRM.saveTag(request: Request)
GET     /downloadTag/:id	  controllers.CRM.downloadTag(id: Integer, request: Request)
POST    /addPeopleFromTag        controllers.CRM.addPeopleFromTag(request: Request)
POST    /addPeopleToTag          controllers.CRM.addPeopleToTag(request: Request)
POST    /removePeopleFromTag     controllers.CRM.removePeopleFromTag(request: Request)
POST    /undoTagChanges          controllers.CRM.undoTagChanges(request: Request)

GET     /viewTaskList/:id         controllers.CRM.viewTaskList(id: Integer, request: Request)

POST      /sendFeedbackEmail          controllers.Application.sendFeedbackEmail(request: Request)

GET     /settings               controllers.Settings.viewSettings(request: Request)
GET     /settings/notifications controllers.Settings.viewSettings(request: Request)
POST    /settings               controllers.Settings.editSettings(request: Request)
POST    /settings/notifications controllers.Settings.editNotifications(request: Request)

GET     /settings/password      controllers.Application.viewPassword(request: Request)
POST    /settings/password      controllers.Application.editPassword(request: Request)

GET     /settings/checklists    controllers.Settings.viewTaskLists(request: Request)
POST    /settings/newChecklist  controllers.Settings.newTaskList(request: Request)
GET     /settings/checklist/:id controllers.Settings.viewTaskList(id : Integer, request: Request)
POST    /settings/saveList      controllers.Settings.saveTaskList(request: Request)
GET     /settings/task/:id      controllers.Settings.editTask(id : Integer, request: Request)
POST    /settings/task          controllers.Settings.saveTask(request: Request)
POST    /settings/task/new      controllers.Settings.newTask(request: Request)

GET     /settings/access        controllers.Settings.viewAccess(request: Request)
POST    /settings/access        controllers.Settings.saveAccess(request: Request)
GET     /settings/access/editUser/:id controllers.Settings.editUser(id : Integer, request: Request)
POST     /settings/access/newUser controllers.Settings.newUser(request: Request)
POST     /settings/access/saveUser controllers.Settings.saveUser(request: Request)


GET    /misc/fileSharing           controllers.Application.fileSharing(request: Request)
GET    /misc/viewFiles              controllers.Application.viewFiles(request: Request)
POST   /misc/saveFileSharingSettings   controllers.Application.saveFileSharingSettings(request: Request)
POST   /misc/uploadFileShare          controllers.Application.uploadFileShare(request: Request)
POST   /misc/emailFile              controllers.Application.emailFile(request: Request)
POST   /misc/deleteFile              controllers.Application.deleteFile(request: Request)


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file)
GET     /robots.txt                 controllers.Assets.at(path="/public", file="robots.txt")


GET     /fb-delete-info                         controllers.Public.facebookDeleteInfo()
POST    /login                controllers.Public.doLogin(request: Request)

GET     /logout                     com.feth.play.module.pa.controllers.Authenticate.logout(request: Request)
GET     /out		            controllers.Public.loggedOut(request: Request)
GET     /authenticate/:provider     controllers.Public.authenticate(provider: String, request: Request)
GET     /authenticate/:provider/denied     controllers.Public.oAuthDenied(provider: String)
